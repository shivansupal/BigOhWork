//C++ program to remove duplicate element from array
//Including standard header file

#include<bits/stdc++.h>
using namespace std;

int partition(int arr[], int start, int end)
{
 
    int pivot = arr[start];
 
    int count = 0;
    for (int i = start + 1; i <= end; i++) {
        if (arr[i] <= pivot)
            count++;
    }
 
    // Giving pivot element its correct position
    int pivotIndex = start + count;
    swap(arr[pivotIndex], arr[start]);
 
    // Sorting left and right parts of the pivot element
    int i = start, j = end;
 
    while (i < pivotIndex && j > pivotIndex) {
 
        while (arr[i] <= pivot) {
            i++;
        }
 
        while (arr[j] > pivot) {
            j--;
        }
 
        if (i < pivotIndex && j > pivotIndex) {
            swap(arr[i++], arr[j--]);
        }
    }
 
    return pivotIndex;
}
 
void quickSort(int arr[], int start, int end)
{
 
    // base case
    if (start >= end)
        return;
 
    // partitioning the array
    int p = partition(arr, start, end);
 
    // Sorting the left part
    quickSort(arr, start, p - 1);
 
    // Sorting the right part
    quickSort(arr, p + 1, end);
}

//function to remove duplicate
void removeduplicate(int arr[],int n){
    

   quickSort(arr, 0, n - 1);
 
   int temp[n];
    int j=0;
    
    for(int i=1;i<=n;i++){
        if(arr[i]!=arr[i-1]){
            
            temp[j++]=arr[i-1];
        }
         }
    for(int i=0;i<j;i++){
        
       cout<<temp[i];
    }
}

int main(){
    
    int n;
    cin>>n;
    
    int arr[n];
    for(int i=0;i<n;i++){
        
        cin>>arr[i];
    }
    
    removeduplicate(arr,n);
    
 
  }
return 0;
}
