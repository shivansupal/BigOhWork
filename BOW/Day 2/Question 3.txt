#include<bits/stdc++.h>

using namespace std;

int partition(int arr[], int start, int end)
{
 
    int pivot = arr[start];
 
    int count = 0;
    for (int i = start + 1; i <= end; i++) {
        if (arr[i] <= pivot)
            count++;
    }
 
    // Giving pivot element its correct position
    int pivotIndex = start + count;
    swap(arr[pivotIndex], arr[start]);
 
    // Sorting left and right parts of the pivot element
    int i = start, j = end;
 
    while (i < pivotIndex && j > pivotIndex) {
 
        while (arr[i] <= pivot) {
            i++;
        }
 
        while (arr[j] > pivot) {
            j--;
        }
 
        if (i < pivotIndex && j > pivotIndex) {
            swap(arr[i++], arr[j--]);
        }
    }
 
    return pivotIndex;
}
 
void quickSort(int arr[], int start, int end)
{
 
    // base case
    if (start >= end)
        return;
 
    // partitioning the array
    int p = partition(arr, start, end);
 
    // Sorting the left part
    quickSort(arr, start, p - 1);
 
    // Sorting the right part
    quickSort(arr, p + 1, end);
}


bool findNumber(int n,int arr[],int target){
    
    int l,r;
    quicksort(arr,0,n-1);
    
    for(int i=0;i<n;i++){
        
        l=i+1;
        r=n-1;
        
        while(l<r){
            
            
            if(arr[i]+arr[l]+arr[r]){
                
                cout<<arr[i]<<","<<arr[l]<<","<<arr[r]<<endl;
                
                return true;
            }
            
            else if(arr[i]+arr[l]+arr[r]<target){
                
                l++;
            }
            
            else if(arr[i]+arr[l]+arr[r]>target){
                
                r--;
            }
            
            else{
                
                return false;
            }
        }
        
    }
    
    
}

int main(){
    
    int target;
    cin>>target;
    
    int n;
    cin>>n;
    int arr[n];
    
    findNumber(n,arr,target);
 
return 0;   
}
